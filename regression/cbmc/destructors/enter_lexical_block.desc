CORE
main.c
--unwind 10 --show-goto-functions
activate-multi-line-match
(?P<comment_block>\/\/ [0-9]+ file main\.c line [0-9]+ function main)[\s]*6: .*newAlloc4 : struct tag-test[\s]*(?P>comment_block)[\s]*.*newAlloc4 := \{ 4 \}[\s]*(?P>comment_block)[\s]*.*newAlloc6 : struct tag-test[\s]*(?P>comment_block)[\s]*.*newAlloc6 := \{ 6 \}[\s]*(?P>comment_block)[\s]*.*newAlloc7 : struct tag-test[\s]*(?P>comment_block)[\s]*.*newAlloc7 := \{ 7 \}[\s]*(?P>comment_block)[\s]*.*DEAD main::1::2::2::newAlloc7[\s]*(?P>comment_block)[\s]*.*DEAD main::1::2::2::newAlloc6[\s]*(?P>comment_block)[\s]*.*DEAD main::1::2::2::newAlloc4[\s]*(?P>comment_block)[\s]*.*ASSIGN __CPROVER_going_to::nested_if := true[\s]*(?P>comment_block)[\s]*.*GOTO 3
^EXIT=0$
^SIGNAL=0$
--
--
Checks for:

       // 41 file main.c line 36 function main
    6: DECL main::1::2::2::newAlloc4 : struct tag-test
       // 42 file main.c line 36 function main
       ASSIGN main::1::2::2::newAlloc4 := { 4 }
       // 43 file main.c line 37 function main
       DECL main::1::2::2::newAlloc6 : struct tag-test
       // 44 file main.c line 37 function main
       ASSIGN main::1::2::2::newAlloc6 := { 6 }
       // 45 file main.c line 38 function main
       DECL main::1::2::2::newAlloc7 : struct tag-test
       // 46 file main.c line 38 function main
       ASSIGN main::1::2::2::newAlloc7 := { 7 }
       // 47 file main.c line 39 function main
       DEAD main::1::2::2::newAlloc7
       // 48 file main.c line 39 function main
       DEAD main::1::2::2::newAlloc6
       // 49 file main.c line 39 function main
       DEAD main::1::2::2::newAlloc4
       // 50 file main.c line 39 function main
       ASSIGN __CPROVER_going_to::nested_if := true
       // 51 file main.c line 39 function main
       GOTO 3

This asserts that when the GOTO is going into a lexical block that destructors
are not omitted. This used to be a limitation with the previous implementation
and has now been fixed.

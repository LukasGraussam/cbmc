CORE dfcc-only
main.c
--dfcc main --apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main.loop_assigns.\d+\] line 16 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 16 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_step.\d+\] line 16 Check invariant after step for loop .*: SUCCESS$
^\[main.loop_step_unwinding.\d+\] line 16 Check step was unwound for loop .*: SUCCESS$
^\[main.assigns.\d+\] .* Check that i is assignable: SUCCESS$
^\[main.assigns.\d+\] line 26 Check that t->x is assignable: SUCCESS$
^\[main.assigns.\d+\] line 29 Check that t->x is assignable: SUCCESS$
^\[main.assertion.\d+\] line 33 assertion .*: FAILURE$
^VERIFICATION FAILED$
--
--
This test checks that  members of typedef'd and dynamically allocated structs
are correctly havoced when enforcing loop invariants.
The assertion is expected to fail when `t->x` is correctly havoced (so would be
set to a nondet value).
However, it `t->x` is not havoced then it stays at value `0` and would satisfy
the assertion when the loop is replaced by a single nondet iteration.

